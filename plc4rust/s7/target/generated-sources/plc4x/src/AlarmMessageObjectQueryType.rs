/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// package org.apache.plc4x.rust.s7.readwrite;

// Code generated by code-generation. DO NOT EDIT.
use std::io::{Error, ErrorKind, Read, Write};
use plc4rust::{Message, NoOption};
use plc4rust::read_buffer::ReadBuffer;
use plc4rust::write_buffer::WriteBuffer;

use crate::State::State;
use crate::State::StateOptions;
use crate::State::State;
use crate::State::StateOptions;
use crate::State::State;
use crate::State::StateOptions;
use crate::DateAndTime::DateAndTime;
use crate::DateAndTime::DateAndTimeOptions;
use crate::AssociatedValueType::AssociatedValueType;
use crate::AssociatedValueType::AssociatedValueTypeOptions;
use crate::DateAndTime::DateAndTime;
use crate::DateAndTime::DateAndTimeOptions;
use crate::AssociatedValueType::AssociatedValueType;
use crate::AssociatedValueType::AssociatedValueTypeOptions;

#[derive(PartialEq, Debug, Clone)]
pub struct AlarmMessageObjectQueryTypeOptions {
}
#[derive(PartialEq, Debug, Clone)]
pub struct AlarmMessageObjectQueryType {
    pub lengthDataset: u8,
        // -> DefaultReservedField{referenceValue=0x0000} DefaultTypedField{type=AbstractSimpleTypeReference{baseType=UINT, sizeInBits=16}} DefaultField{attributes={}}
    // Intentionally do nothing
    pub eventState: State,
    pub ackStateGoing: State,
    pub ackStateComing: State,
    pub timeComing: DateAndTime,
    pub valueComing: AssociatedValueType,
    pub timeGoing: DateAndTime,
    pub valueGoing: AssociatedValueType
}

impl AlarmMessageObjectQueryType {
}

impl Message for AlarmMessageObjectQueryType {
    type M = AlarmMessageObjectQueryType;
    type P = AlarmMessageObjectQueryTypeOptions;

    fn get_length_in_bits(&self) -> u32 {
        todo!()
    }

    fn serialize<T: Write>(&self, writer: &mut WriteBuffer<T>) -> Result<usize, Error> {
        writer.write_u8(self.lengthDataset)?;
        ---> DefaultReservedField{referenceValue=0x0000} DefaultTypedField{type=AbstractSimpleTypeReference{baseType=UINT, sizeInBits=16}} DefaultField{attributes={}}
        writer.write_u8(0x12)?;
        self.eventState.serialize(writer)?;
        self.ackStateGoing.serialize(writer)?;
        self.ackStateComing.serialize(writer)?;
        self.timeComing.serialize(writer)?;
        self.valueComing.serialize(writer)?;
        self.timeGoing.serialize(writer)?;
        self.valueGoing.serialize(writer)?;
        Ok(0)
    }

    fn parse<T: Read>(reader: &mut ReadBuffer<T>, parameter: Option<Self::P>) -> Result<Self::M, Error> {
        // (Re-)define the options
        let parameter = parameter.unwrap();
        let lengthDataset = reader.read_u8()?;
        // Reserved field
        let _ = reader.read_u16()?;
        let variableSpec = reader.read_u8()?;
        // assert value of constant
        assert_eq!(0x12, variableSpec);
        let eventState = State::parse(reader, Some(StateOptions {  }))?;
        let ackStateGoing = State::parse(reader, Some(StateOptions {  }))?;
        let ackStateComing = State::parse(reader, Some(StateOptions {  }))?;
        let timeComing = DateAndTime::parse(reader, Some(DateAndTimeOptions {  }))?;
        let valueComing = AssociatedValueType::parse(reader, Some(AssociatedValueTypeOptions {  }))?;
        let timeGoing = DateAndTime::parse(reader, Some(DateAndTimeOptions {  }))?;
        let valueGoing = AssociatedValueType::parse(reader, Some(AssociatedValueTypeOptions {  }))?;
        Ok(Self::M {
            lengthDataset,
            eventState,
            ackStateGoing,
            ackStateComing,
            timeComing,
            valueComing,
            timeGoing,
            valueGoing
        })
    }
}


