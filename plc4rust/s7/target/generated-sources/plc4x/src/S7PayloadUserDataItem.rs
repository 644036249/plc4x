/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// package org.apache.plc4x.rust.s7.readwrite;

// Code generated by code-generation. DO NOT EDIT.
use std::io::{Error, ErrorKind, Read, Write};
use plc4rust::{Message, NoOption};
use plc4rust::read_buffer::ReadBuffer;
use plc4rust::write_buffer::WriteBuffer;

use crate::S7PayloadDiagnosticMessage::S7PayloadDiagnosticMessage;
use crate::S7PayloadDiagnosticMessage::S7PayloadDiagnosticMessageOptions;
use crate::S7PayloadAlarm8::S7PayloadAlarm8;
use crate::S7PayloadAlarm8::S7PayloadAlarm8Options;
use crate::S7PayloadNotify::S7PayloadNotify;
use crate::S7PayloadNotify::S7PayloadNotifyOptions;
use crate::S7PayloadAlarmAckInd::S7PayloadAlarmAckInd;
use crate::S7PayloadAlarmAckInd::S7PayloadAlarmAckIndOptions;
use crate::S7PayloadAlarmSQ::S7PayloadAlarmSQ;
use crate::S7PayloadAlarmSQ::S7PayloadAlarmSQOptions;
use crate::S7PayloadAlarmS::S7PayloadAlarmS;
use crate::S7PayloadAlarmS::S7PayloadAlarmSOptions;
use crate::S7PayloadAlarmSC::S7PayloadAlarmSC;
use crate::S7PayloadAlarmSC::S7PayloadAlarmSCOptions;
use crate::S7PayloadNotify8::S7PayloadNotify8;
use crate::S7PayloadNotify8::S7PayloadNotify8Options;
use crate::S7PayloadUserDataItemCpuFunctionReadSzlRequest::S7PayloadUserDataItemCpuFunctionReadSzlRequest;
use crate::S7PayloadUserDataItemCpuFunctionReadSzlRequest::S7PayloadUserDataItemCpuFunctionReadSzlRequestOptions;
use crate::S7PayloadUserDataItemCpuFunctionReadSzlResponse::S7PayloadUserDataItemCpuFunctionReadSzlResponse;
use crate::S7PayloadUserDataItemCpuFunctionReadSzlResponse::S7PayloadUserDataItemCpuFunctionReadSzlResponseOptions;
use crate::S7PayloadUserDataItemCpuFunctionMsgSubscription::S7PayloadUserDataItemCpuFunctionMsgSubscription;
use crate::S7PayloadUserDataItemCpuFunctionMsgSubscription::S7PayloadUserDataItemCpuFunctionMsgSubscriptionOptions;
use crate::S7PayloadUserDataItemCpuFunctionMsgSubscriptionResponse::S7PayloadUserDataItemCpuFunctionMsgSubscriptionResponse;
use crate::S7PayloadUserDataItemCpuFunctionMsgSubscriptionResponse::S7PayloadUserDataItemCpuFunctionMsgSubscriptionResponseOptions;
use crate::S7PayloadUserDataItemCpuFunctionMsgSubscriptionSysResponse::S7PayloadUserDataItemCpuFunctionMsgSubscriptionSysResponse;
use crate::S7PayloadUserDataItemCpuFunctionMsgSubscriptionSysResponse::S7PayloadUserDataItemCpuFunctionMsgSubscriptionSysResponseOptions;
use crate::S7PayloadUserDataItemCpuFunctionMsgSubscriptionAlarmResponse::S7PayloadUserDataItemCpuFunctionMsgSubscriptionAlarmResponse;
use crate::S7PayloadUserDataItemCpuFunctionMsgSubscriptionAlarmResponse::S7PayloadUserDataItemCpuFunctionMsgSubscriptionAlarmResponseOptions;
use crate::S7PayloadUserDataItemCpuFunctionAlarmAck::S7PayloadUserDataItemCpuFunctionAlarmAck;
use crate::S7PayloadUserDataItemCpuFunctionAlarmAck::S7PayloadUserDataItemCpuFunctionAlarmAckOptions;
use crate::S7PayloadUserDataItemCpuFunctionAlarmAckResponse::S7PayloadUserDataItemCpuFunctionAlarmAckResponse;
use crate::S7PayloadUserDataItemCpuFunctionAlarmAckResponse::S7PayloadUserDataItemCpuFunctionAlarmAckResponseOptions;
use crate::S7PayloadUserDataItemCpuFunctionAlarmQuery::S7PayloadUserDataItemCpuFunctionAlarmQuery;
use crate::S7PayloadUserDataItemCpuFunctionAlarmQuery::S7PayloadUserDataItemCpuFunctionAlarmQueryOptions;
use crate::S7PayloadUserDataItemCpuFunctionAlarmQueryResponse::S7PayloadUserDataItemCpuFunctionAlarmQueryResponse;
use crate::S7PayloadUserDataItemCpuFunctionAlarmQueryResponse::S7PayloadUserDataItemCpuFunctionAlarmQueryResponseOptions;
use crate::DataTransportErrorCode::DataTransportErrorCode;
use crate::DataTransportSize::DataTransportSize;

#[derive(PartialEq, Debug, Clone)]
pub struct S7PayloadUserDataItemOptions {
    pub cpuFunctionType: u8, 
    pub cpuSubfunction: u8
}

#[derive(PartialEq, Debug, Clone)]
pub enum S7PayloadUserDataItem {
    S7PayloadDiagnosticMessage(S7PayloadDiagnosticMessage),
    S7PayloadAlarm8(S7PayloadAlarm8),
    S7PayloadNotify(S7PayloadNotify),
    S7PayloadAlarmAckInd(S7PayloadAlarmAckInd),
    S7PayloadAlarmSQ(S7PayloadAlarmSQ),
    S7PayloadAlarmS(S7PayloadAlarmS),
    S7PayloadAlarmSC(S7PayloadAlarmSC),
    S7PayloadNotify8(S7PayloadNotify8),
    S7PayloadUserDataItemCpuFunctionReadSzlRequest(S7PayloadUserDataItemCpuFunctionReadSzlRequest),
    S7PayloadUserDataItemCpuFunctionReadSzlResponse(S7PayloadUserDataItemCpuFunctionReadSzlResponse),
    S7PayloadUserDataItemCpuFunctionMsgSubscription(S7PayloadUserDataItemCpuFunctionMsgSubscription),
    S7PayloadUserDataItemCpuFunctionMsgSubscriptionResponse(S7PayloadUserDataItemCpuFunctionMsgSubscriptionResponse),
    S7PayloadUserDataItemCpuFunctionMsgSubscriptionSysResponse(S7PayloadUserDataItemCpuFunctionMsgSubscriptionSysResponse),
    S7PayloadUserDataItemCpuFunctionMsgSubscriptionAlarmResponse(S7PayloadUserDataItemCpuFunctionMsgSubscriptionAlarmResponse),
    S7PayloadUserDataItemCpuFunctionAlarmAck(S7PayloadUserDataItemCpuFunctionAlarmAck),
    S7PayloadUserDataItemCpuFunctionAlarmAckResponse(S7PayloadUserDataItemCpuFunctionAlarmAckResponse),
    S7PayloadUserDataItemCpuFunctionAlarmQuery(S7PayloadUserDataItemCpuFunctionAlarmQuery),
    S7PayloadUserDataItemCpuFunctionAlarmQueryResponse(S7PayloadUserDataItemCpuFunctionAlarmQueryResponse)
}

impl Message for S7PayloadUserDataItem {
    type M = S7PayloadUserDataItem;
    type P = S7PayloadUserDataItemOptions;

    fn get_length_in_bits(&self) -> u32 {
        todo!()
    }

    fn serialize<T: Write>(&self, writer: &mut WriteBuffer<T>) -> Result<usize, Error> {
        match self {
            S7PayloadUserDataItem::S7PayloadDiagnosticMessage(msg) => {
                msg.serialize(writer)
            }
            S7PayloadUserDataItem::S7PayloadAlarm8(msg) => {
                msg.serialize(writer)
            }
            S7PayloadUserDataItem::S7PayloadNotify(msg) => {
                msg.serialize(writer)
            }
            S7PayloadUserDataItem::S7PayloadAlarmAckInd(msg) => {
                msg.serialize(writer)
            }
            S7PayloadUserDataItem::S7PayloadAlarmSQ(msg) => {
                msg.serialize(writer)
            }
            S7PayloadUserDataItem::S7PayloadAlarmS(msg) => {
                msg.serialize(writer)
            }
            S7PayloadUserDataItem::S7PayloadAlarmSC(msg) => {
                msg.serialize(writer)
            }
            S7PayloadUserDataItem::S7PayloadNotify8(msg) => {
                msg.serialize(writer)
            }
            S7PayloadUserDataItem::S7PayloadUserDataItemCpuFunctionReadSzlRequest(msg) => {
                msg.serialize(writer)
            }
            S7PayloadUserDataItem::S7PayloadUserDataItemCpuFunctionReadSzlResponse(msg) => {
                msg.serialize(writer)
            }
            S7PayloadUserDataItem::S7PayloadUserDataItemCpuFunctionMsgSubscription(msg) => {
                msg.serialize(writer)
            }
            S7PayloadUserDataItem::S7PayloadUserDataItemCpuFunctionMsgSubscriptionResponse(msg) => {
                msg.serialize(writer)
            }
            S7PayloadUserDataItem::S7PayloadUserDataItemCpuFunctionMsgSubscriptionSysResponse(msg) => {
                msg.serialize(writer)
            }
            S7PayloadUserDataItem::S7PayloadUserDataItemCpuFunctionMsgSubscriptionAlarmResponse(msg) => {
                msg.serialize(writer)
            }
            S7PayloadUserDataItem::S7PayloadUserDataItemCpuFunctionAlarmAck(msg) => {
                msg.serialize(writer)
            }
            S7PayloadUserDataItem::S7PayloadUserDataItemCpuFunctionAlarmAckResponse(msg) => {
                msg.serialize(writer)
            }
            S7PayloadUserDataItem::S7PayloadUserDataItemCpuFunctionAlarmQuery(msg) => {
                msg.serialize(writer)
            }
            S7PayloadUserDataItem::S7PayloadUserDataItemCpuFunctionAlarmQueryResponse(msg) => {
                msg.serialize(writer)
            }
        }
    }

    fn parse<T: Read>(reader: &mut ReadBuffer<T>, parameter: Option<Self::P>) -> Result<Self::M, Error> {
        // (Re-)define the options
        let parameter = parameter.unwrap();
        let cpuFunctionType = parameter.cpuFunctionType;
        let cpuSubfunction = parameter.cpuSubfunction;
        let returnCode = DataTransportErrorCode::parse(reader, None)?;
        let transportSize = DataTransportSize::parse(reader, None)?;
            // -> DefaultImplicitField{serializeExpression=DefaultBinaryTerm{a=DefaultVariableLiteral{name='lengthInBytes', typeReference='null', args=null, index=null, child=null}, b=DefaultNumericLiteral{number=4}, operation='-'}} DefaultTypedNamedField{name='dataLength'} DefaultTypedField{type=AbstractSimpleTypeReference{baseType=UINT, sizeInBits=16}} DefaultField{attributes={}}
        match (cpuFunctionType, cpuSubfunction, dataLength) {
            (0x00, 0x03, _) => {
                Ok(S7PayloadUserDataItem::S7PayloadDiagnosticMessage(S7PayloadDiagnosticMessage::parse::<T>(reader, Some(S7PayloadDiagnosticMessageOptions {
                    cpuFunctionType, 
                    cpuSubfunction
                }))?))
            }
            (0x00, 0x05, _) => {
                Ok(S7PayloadUserDataItem::S7PayloadAlarm8(S7PayloadAlarm8::parse::<T>(reader, Some(S7PayloadAlarm8Options {
                    cpuFunctionType, 
                    cpuSubfunction
                }))?))
            }
            (0x00, 0x06, _) => {
                Ok(S7PayloadUserDataItem::S7PayloadNotify(S7PayloadNotify::parse::<T>(reader, Some(S7PayloadNotifyOptions {
                    cpuFunctionType, 
                    cpuSubfunction
                }))?))
            }
            (0x00, 0x0c, _) => {
                Ok(S7PayloadUserDataItem::S7PayloadAlarmAckInd(S7PayloadAlarmAckInd::parse::<T>(reader, Some(S7PayloadAlarmAckIndOptions {
                    cpuFunctionType, 
                    cpuSubfunction
                }))?))
            }
            (0x00, 0x11, _) => {
                Ok(S7PayloadUserDataItem::S7PayloadAlarmSQ(S7PayloadAlarmSQ::parse::<T>(reader, Some(S7PayloadAlarmSQOptions {
                    cpuFunctionType, 
                    cpuSubfunction
                }))?))
            }
            (0x00, 0x12, _) => {
                Ok(S7PayloadUserDataItem::S7PayloadAlarmS(S7PayloadAlarmS::parse::<T>(reader, Some(S7PayloadAlarmSOptions {
                    cpuFunctionType, 
                    cpuSubfunction
                }))?))
            }
            (0x00, 0x13, _) => {
                Ok(S7PayloadUserDataItem::S7PayloadAlarmSC(S7PayloadAlarmSC::parse::<T>(reader, Some(S7PayloadAlarmSCOptions {
                    cpuFunctionType, 
                    cpuSubfunction
                }))?))
            }
            (0x00, 0x16, _) => {
                Ok(S7PayloadUserDataItem::S7PayloadNotify8(S7PayloadNotify8::parse::<T>(reader, Some(S7PayloadNotify8Options {
                    cpuFunctionType, 
                    cpuSubfunction
                }))?))
            }
            (0x04, 0x01, _) => {
                Ok(S7PayloadUserDataItem::S7PayloadUserDataItemCpuFunctionReadSzlRequest(S7PayloadUserDataItemCpuFunctionReadSzlRequest::parse::<T>(reader, Some(S7PayloadUserDataItemCpuFunctionReadSzlRequestOptions {
                    cpuFunctionType, 
                    cpuSubfunction
                }))?))
            }
            (0x08, 0x01, _) => {
                Ok(S7PayloadUserDataItem::S7PayloadUserDataItemCpuFunctionReadSzlResponse(S7PayloadUserDataItemCpuFunctionReadSzlResponse::parse::<T>(reader, Some(S7PayloadUserDataItemCpuFunctionReadSzlResponseOptions {
                    cpuFunctionType, 
                    cpuSubfunction
                }))?))
            }
            (0x04, 0x02, _) => {
                Ok(S7PayloadUserDataItem::S7PayloadUserDataItemCpuFunctionMsgSubscription(S7PayloadUserDataItemCpuFunctionMsgSubscription::parse::<T>(reader, Some(S7PayloadUserDataItemCpuFunctionMsgSubscriptionOptions {
                    cpuFunctionType, 
                    cpuSubfunction
                }))?))
            }
            (0x08, 0x02, asdfasdf) => {
                Ok(S7PayloadUserDataItem::S7PayloadUserDataItemCpuFunctionMsgSubscriptionResponse(S7PayloadUserDataItemCpuFunctionMsgSubscriptionResponse::parse::<T>(reader, Some(S7PayloadUserDataItemCpuFunctionMsgSubscriptionResponseOptions {
                    cpuFunctionType, 
                    cpuSubfunction
                }))?))
            }
            (0x08, 0x02, asdfasdf) => {
                Ok(S7PayloadUserDataItem::S7PayloadUserDataItemCpuFunctionMsgSubscriptionSysResponse(S7PayloadUserDataItemCpuFunctionMsgSubscriptionSysResponse::parse::<T>(reader, Some(S7PayloadUserDataItemCpuFunctionMsgSubscriptionSysResponseOptions {
                    cpuFunctionType, 
                    cpuSubfunction
                }))?))
            }
            (0x08, 0x02, asdfasdf) => {
                Ok(S7PayloadUserDataItem::S7PayloadUserDataItemCpuFunctionMsgSubscriptionAlarmResponse(S7PayloadUserDataItemCpuFunctionMsgSubscriptionAlarmResponse::parse::<T>(reader, Some(S7PayloadUserDataItemCpuFunctionMsgSubscriptionAlarmResponseOptions {
                    cpuFunctionType, 
                    cpuSubfunction
                }))?))
            }
            (0x04, 0x0b, _) => {
                Ok(S7PayloadUserDataItem::S7PayloadUserDataItemCpuFunctionAlarmAck(S7PayloadUserDataItemCpuFunctionAlarmAck::parse::<T>(reader, Some(S7PayloadUserDataItemCpuFunctionAlarmAckOptions {
                    cpuFunctionType, 
                    cpuSubfunction
                }))?))
            }
            (0x08, 0x0b, _) => {
                Ok(S7PayloadUserDataItem::S7PayloadUserDataItemCpuFunctionAlarmAckResponse(S7PayloadUserDataItemCpuFunctionAlarmAckResponse::parse::<T>(reader, Some(S7PayloadUserDataItemCpuFunctionAlarmAckResponseOptions {
                    cpuFunctionType, 
                    cpuSubfunction
                }))?))
            }
            (0x04, 0x13, _) => {
                Ok(S7PayloadUserDataItem::S7PayloadUserDataItemCpuFunctionAlarmQuery(S7PayloadUserDataItemCpuFunctionAlarmQuery::parse::<T>(reader, Some(S7PayloadUserDataItemCpuFunctionAlarmQueryOptions {
                    cpuFunctionType, 
                    cpuSubfunction
                }))?))
            }
            (0x08, 0x13, _) => {
                Ok(S7PayloadUserDataItem::S7PayloadUserDataItemCpuFunctionAlarmQueryResponse(S7PayloadUserDataItemCpuFunctionAlarmQueryResponse::parse::<T>(reader, Some(S7PayloadUserDataItemCpuFunctionAlarmQueryResponseOptions {
                    cpuFunctionType, 
                    cpuSubfunction
                }))?))
            }
            _ => {
                panic!("Unable to parse!");
            }
        }
    }
}


