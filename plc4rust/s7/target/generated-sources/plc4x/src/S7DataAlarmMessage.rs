/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// package org.apache.plc4x.rust.s7.readwrite;

// Code generated by code-generation. DO NOT EDIT.
use std::io::{Error, ErrorKind, Read, Write};
use plc4rust::{Message, NoOption};
use plc4rust::read_buffer::ReadBuffer;
use plc4rust::write_buffer::WriteBuffer;

use crate::S7MessageObjectRequest::S7MessageObjectRequest;
use crate::S7MessageObjectRequest::S7MessageObjectRequestOptions;
use crate::S7MessageObjectResponse::S7MessageObjectResponse;
use crate::S7MessageObjectResponse::S7MessageObjectResponseOptions;

#[derive(PartialEq, Debug, Clone)]
pub struct S7DataAlarmMessageOptions {
    pub cpuFunctionType: u8
}

#[derive(PartialEq, Debug, Clone)]
pub enum S7DataAlarmMessage {
    S7MessageObjectRequest(S7MessageObjectRequest),
    S7MessageObjectResponse(S7MessageObjectResponse)
}

impl Message for S7DataAlarmMessage {
    type M = S7DataAlarmMessage;
    type P = S7DataAlarmMessageOptions;

    fn get_length_in_bits(&self) -> u32 {
        todo!()
    }

    fn serialize<T: Write>(&self, writer: &mut WriteBuffer<T>) -> Result<usize, Error> {
        match self {
            S7DataAlarmMessage::S7MessageObjectRequest(msg) => {
                msg.serialize(writer)
            }
            S7DataAlarmMessage::S7MessageObjectResponse(msg) => {
                msg.serialize(writer)
            }
        }
    }

    fn parse<T: Read>(reader: &mut ReadBuffer<T>, parameter: Option<Self::P>) -> Result<Self::M, Error> {
        // (Re-)define the options
        let parameter = parameter.unwrap();
        let cpuFunctionType = parameter.cpuFunctionType;
            // -> DefaultConstField{referenceValue=DefaultHexadecimalLiteral{hexString=0x00}} DefaultTypedNamedField{name='functionId'} DefaultTypedField{type=AbstractSimpleTypeReference{baseType=UINT, sizeInBits=8}} DefaultField{attributes={}}
            // -> DefaultConstField{referenceValue=DefaultHexadecimalLiteral{hexString=0x01}} DefaultTypedNamedField{name='numberMessageObj'} DefaultTypedField{type=AbstractSimpleTypeReference{baseType=UINT, sizeInBits=8}} DefaultField{attributes={}}
        match (cpuFunctionType) {
            (0x04) => {
                Ok(S7DataAlarmMessage::S7MessageObjectRequest(S7MessageObjectRequest::parse::<T>(reader, Some(S7MessageObjectRequestOptions {
                    cpuFunctionType
                }))?))
            }
            (0x08) => {
                Ok(S7DataAlarmMessage::S7MessageObjectResponse(S7MessageObjectResponse::parse::<T>(reader, Some(S7MessageObjectResponseOptions {
                    cpuFunctionType
                }))?))
            }
            _ => {
                panic!("Unable to parse!");
            }
        }
    }
}


