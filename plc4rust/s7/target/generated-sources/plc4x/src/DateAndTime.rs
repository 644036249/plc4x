/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// package org.apache.plc4x.rust.s7.readwrite;

// Code generated by code-generation. DO NOT EDIT.
use std::io::{Error, ErrorKind, Read, Write};
use plc4rust::{Message, NoOption};
use plc4rust::read_buffer::ReadBuffer;
use plc4rust::write_buffer::WriteBuffer;


#[derive(PartialEq, Debug, Clone)]
pub struct DateAndTimeOptions {
}
#[derive(PartialEq, Debug, Clone)]
pub struct DateAndTime {
        // -> DefaultManualField{parseExpression=DefaultVariableLiteral{name='STATIC_CALL', typeReference='null', args=[DefaultStringLiteral{value='BcdToInt'}, DefaultVariableLiteral{name='readBuffer', typeReference='null', args=null, index=null, child=null}], index=null, child=null}, serializeExpression=DefaultVariableLiteral{name='STATIC_CALL', typeReference='null', args=[DefaultStringLiteral{value='ByteToBcd'}, DefaultVariableLiteral{name='writeBuffer', typeReference='null', args=null, index=null, child=null}, DefaultVariableLiteral{name='year', typeReference='null', args=null, index=null, child=null}], index=null, child=null}, lengthExpression=DefaultNumericLiteral{number=8}} DefaultTypedNamedField{name='year'} DefaultTypedField{type=AbstractSimpleTypeReference{baseType=UINT, sizeInBits=8}} DefaultField{attributes={}}
        // -> DefaultManualField{parseExpression=DefaultVariableLiteral{name='STATIC_CALL', typeReference='null', args=[DefaultStringLiteral{value='BcdToInt'}, DefaultVariableLiteral{name='readBuffer', typeReference='null', args=null, index=null, child=null}], index=null, child=null}, serializeExpression=DefaultVariableLiteral{name='STATIC_CALL', typeReference='null', args=[DefaultStringLiteral{value='ByteToBcd'}, DefaultVariableLiteral{name='writeBuffer', typeReference='null', args=null, index=null, child=null}, DefaultVariableLiteral{name='month', typeReference='null', args=null, index=null, child=null}], index=null, child=null}, lengthExpression=DefaultNumericLiteral{number=8}} DefaultTypedNamedField{name='month'} DefaultTypedField{type=AbstractSimpleTypeReference{baseType=UINT, sizeInBits=8}} DefaultField{attributes={}}
        // -> DefaultManualField{parseExpression=DefaultVariableLiteral{name='STATIC_CALL', typeReference='null', args=[DefaultStringLiteral{value='BcdToInt'}, DefaultVariableLiteral{name='readBuffer', typeReference='null', args=null, index=null, child=null}], index=null, child=null}, serializeExpression=DefaultVariableLiteral{name='STATIC_CALL', typeReference='null', args=[DefaultStringLiteral{value='ByteToBcd'}, DefaultVariableLiteral{name='writeBuffer', typeReference='null', args=null, index=null, child=null}, DefaultVariableLiteral{name='day', typeReference='null', args=null, index=null, child=null}], index=null, child=null}, lengthExpression=DefaultNumericLiteral{number=8}} DefaultTypedNamedField{name='day'} DefaultTypedField{type=AbstractSimpleTypeReference{baseType=UINT, sizeInBits=8}} DefaultField{attributes={}}
        // -> DefaultManualField{parseExpression=DefaultVariableLiteral{name='STATIC_CALL', typeReference='null', args=[DefaultStringLiteral{value='BcdToInt'}, DefaultVariableLiteral{name='readBuffer', typeReference='null', args=null, index=null, child=null}], index=null, child=null}, serializeExpression=DefaultVariableLiteral{name='STATIC_CALL', typeReference='null', args=[DefaultStringLiteral{value='ByteToBcd'}, DefaultVariableLiteral{name='writeBuffer', typeReference='null', args=null, index=null, child=null}, DefaultVariableLiteral{name='hour', typeReference='null', args=null, index=null, child=null}], index=null, child=null}, lengthExpression=DefaultNumericLiteral{number=8}} DefaultTypedNamedField{name='hour'} DefaultTypedField{type=AbstractSimpleTypeReference{baseType=UINT, sizeInBits=8}} DefaultField{attributes={}}
        // -> DefaultManualField{parseExpression=DefaultVariableLiteral{name='STATIC_CALL', typeReference='null', args=[DefaultStringLiteral{value='BcdToInt'}, DefaultVariableLiteral{name='readBuffer', typeReference='null', args=null, index=null, child=null}], index=null, child=null}, serializeExpression=DefaultVariableLiteral{name='STATIC_CALL', typeReference='null', args=[DefaultStringLiteral{value='ByteToBcd'}, DefaultVariableLiteral{name='writeBuffer', typeReference='null', args=null, index=null, child=null}, DefaultVariableLiteral{name='minutes', typeReference='null', args=null, index=null, child=null}], index=null, child=null}, lengthExpression=DefaultNumericLiteral{number=8}} DefaultTypedNamedField{name='minutes'} DefaultTypedField{type=AbstractSimpleTypeReference{baseType=UINT, sizeInBits=8}} DefaultField{attributes={}}
        // -> DefaultManualField{parseExpression=DefaultVariableLiteral{name='STATIC_CALL', typeReference='null', args=[DefaultStringLiteral{value='BcdToInt'}, DefaultVariableLiteral{name='readBuffer', typeReference='null', args=null, index=null, child=null}], index=null, child=null}, serializeExpression=DefaultVariableLiteral{name='STATIC_CALL', typeReference='null', args=[DefaultStringLiteral{value='ByteToBcd'}, DefaultVariableLiteral{name='writeBuffer', typeReference='null', args=null, index=null, child=null}, DefaultVariableLiteral{name='seconds', typeReference='null', args=null, index=null, child=null}], index=null, child=null}, lengthExpression=DefaultNumericLiteral{number=8}} DefaultTypedNamedField{name='seconds'} DefaultTypedField{type=AbstractSimpleTypeReference{baseType=UINT, sizeInBits=8}} DefaultField{attributes={}}
        // -> DefaultManualField{parseExpression=DefaultVariableLiteral{name='STATIC_CALL', typeReference='null', args=[DefaultStringLiteral{value='S7msecToInt'}, DefaultVariableLiteral{name='readBuffer', typeReference='null', args=null, index=null, child=null}], index=null, child=null}, serializeExpression=DefaultVariableLiteral{name='STATIC_CALL', typeReference='null', args=[DefaultStringLiteral{value='IntToS7msec'}, DefaultVariableLiteral{name='writeBuffer', typeReference='null', args=null, index=null, child=null}, DefaultVariableLiteral{name='msec', typeReference='null', args=null, index=null, child=null}], index=null, child=null}, lengthExpression=DefaultNumericLiteral{number=12}} DefaultTypedNamedField{name='msec'} DefaultTypedField{type=AbstractSimpleTypeReference{baseType=UINT, sizeInBits=12}} DefaultField{attributes={}}
    pub dow: u8
}

impl DateAndTime {
}

impl Message for DateAndTime {
    type M = DateAndTime;
    type P = DateAndTimeOptions;

    fn get_length_in_bits(&self) -> u32 {
        todo!()
    }

    fn serialize<T: Write>(&self, writer: &mut WriteBuffer<T>) -> Result<usize, Error> {
        writer.write_u8(self.year)?;
        writer.write_u8(self.month)?;
        writer.write_u8(self.day)?;
        writer.write_u8(self.hour)?;
        writer.write_u8(self.minutes)?;
        writer.write_u8(self.seconds)?;
        writer.write_u_n(12, self.self.msec as u64)? as u16;
        writer.write_u_n(4, self.self.dow as u64)? as u8;
        Ok(0)
    }

    fn parse<T: Read>(reader: &mut ReadBuffer<T>, parameter: Option<Self::P>) -> Result<Self::M, Error> {
        // (Re-)define the options
        let parameter = parameter.unwrap();
        let year = reader.read_u8()?;
        let month = reader.read_u8()?;
        let day = reader.read_u8()?;
        let hour = reader.read_u8()?;
        let minutes = reader.read_u8()?;
        let seconds = reader.read_u8()?;
        let msec = reader.read_u_n(12)? as u16;
        let dow = reader.read_u_n(4)? as u8;
        Ok(Self::M {
            year,
            month,
            day,
            hour,
            minutes,
            seconds,
            msec,
            dow
        })
    }
}


