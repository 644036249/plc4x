/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// package org.apache.plc4x.rust.s7.readwrite;

// Code generated by code-generation. DO NOT EDIT.
use std::io::{Error, ErrorKind, Read, Write};
use plc4rust::{Message, NoOption};
use plc4rust::read_buffer::ReadBuffer;
use plc4rust::write_buffer::WriteBuffer;

use crate::COTPPacketData::COTPPacketData;
use crate::COTPPacketData::COTPPacketDataOptions;
use crate::COTPPacketConnectionRequest::COTPPacketConnectionRequest;
use crate::COTPPacketConnectionRequest::COTPPacketConnectionRequestOptions;
use crate::COTPPacketConnectionResponse::COTPPacketConnectionResponse;
use crate::COTPPacketConnectionResponse::COTPPacketConnectionResponseOptions;
use crate::COTPPacketDisconnectRequest::COTPPacketDisconnectRequest;
use crate::COTPPacketDisconnectRequest::COTPPacketDisconnectRequestOptions;
use crate::COTPPacketDisconnectResponse::COTPPacketDisconnectResponse;
use crate::COTPPacketDisconnectResponse::COTPPacketDisconnectResponseOptions;
use crate::COTPPacketTpduError::COTPPacketTpduError;
use crate::COTPPacketTpduError::COTPPacketTpduErrorOptions;
use crate::COTPParameter::COTPParameter;
use crate::COTPParameter::COTPParameterOptions;
use crate::S7Message::S7Message;
use crate::S7Message::S7MessageOptions;

#[derive(PartialEq, Debug, Clone)]
pub struct COTPPacketOptions {
    pub cotpLen: u16
}
#[derive(PartialEq, Debug, Clone)]
pub enum COTPPacket {
    COTPPacketData(COTPPacketData),
    COTPPacketConnectionRequest(COTPPacketConnectionRequest),
    COTPPacketConnectionResponse(COTPPacketConnectionResponse),
    COTPPacketDisconnectRequest(COTPPacketDisconnectRequest),
    COTPPacketDisconnectResponse(COTPPacketDisconnectResponse),
    COTPPacketTpduError(COTPPacketTpduError)
}

impl Message for COTPPacket {
    type M = COTPPacket;
    type P = COTPPacketOptions;

    fn get_length_in_bits(&self) -> u32 {
        todo!()
    }

    fn serialize<T: Write>(&self, writer: &mut WriteBuffer<T>) -> Result<usize, Error> {
        match self {
            COTPPacket::COTPPacketData(msg) => {
                msg.serialize(writer)
            }
            COTPPacket::COTPPacketConnectionRequest(msg) => {
                msg.serialize(writer)
            }
            COTPPacket::COTPPacketConnectionResponse(msg) => {
                msg.serialize(writer)
            }
            COTPPacket::COTPPacketDisconnectRequest(msg) => {
                msg.serialize(writer)
            }
            COTPPacket::COTPPacketDisconnectResponse(msg) => {
                msg.serialize(writer)
            }
            COTPPacket::COTPPacketTpduError(msg) => {
                msg.serialize(writer)
            }
        }
    }

    fn parse<T: Read>(reader: &mut ReadBuffer<T>, parameter: Option<Self::P>) -> Result<Self::M, Error> {
        // (Re-)define the options
        let parameter = parameter.unwrap();
        let cotpLen = parameter.cotpLen;
            // -> DefaultImplicitField{serializeExpression=DefaultBinaryTerm{a=DefaultVariableLiteral{name='lengthInBytes', typeReference='null', args=null, index=null, child=null}, b=DefaultUnaryTerm{a=DefaultBinaryTerm{a=DefaultUnaryTerm{a=DefaultTernaryTerm{a=DefaultUnaryTerm{a=DefaultBinaryTerm{a=DefaultVariableLiteral{name='payload', typeReference='DefaultComplexTypeReference{name='S7Message', params=null}', args=null, index=null, child=null}, b=DefaultNullLiteral{}, operation='!='}, operation='()'}, b=DefaultVariableLiteral{name='payload', typeReference='DefaultComplexTypeReference{name='S7Message', params=null}', args=null, index=null, child=DefaultVariableLiteral{name='lengthInBytes', typeReference='null', args=null, index=null, child=null}}, c=DefaultNumericLiteral{number=0}, operation='if'}, operation='()'}, b=DefaultNumericLiteral{number=1}, operation='+'}, operation='()'}, operation='-'}} DefaultTypedNamedField{name='headerLength'} DefaultTypedField{type=AbstractSimpleTypeReference{baseType=UINT, sizeInBits=8}} DefaultField{attributes={}}
        let tpduCode = reader.read_u8()?;
        match (tpduCode) {
            (0xF0) => {
                Ok(COTPPacket::COTPPacketData(COTPPacketData::parse::<T>(reader, Some(COTPPacketDataOptions {
                    cotpLen
                }))?))
            }
            (0xE0) => {
                Ok(COTPPacket::COTPPacketConnectionRequest(COTPPacketConnectionRequest::parse::<T>(reader, Some(COTPPacketConnectionRequestOptions {
                    cotpLen
                }))?))
            }
            (0xD0) => {
                Ok(COTPPacket::COTPPacketConnectionResponse(COTPPacketConnectionResponse::parse::<T>(reader, Some(COTPPacketConnectionResponseOptions {
                    cotpLen
                }))?))
            }
            (0x80) => {
                Ok(COTPPacket::COTPPacketDisconnectRequest(COTPPacketDisconnectRequest::parse::<T>(reader, Some(COTPPacketDisconnectRequestOptions {
                    cotpLen
                }))?))
            }
            (0xC0) => {
                Ok(COTPPacket::COTPPacketDisconnectResponse(COTPPacketDisconnectResponse::parse::<T>(reader, Some(COTPPacketDisconnectResponseOptions {
                    cotpLen
                }))?))
            }
            (0x70) => {
                Ok(COTPPacket::COTPPacketTpduError(COTPPacketTpduError::parse::<T>(reader, Some(COTPPacketTpduErrorOptions {
                    cotpLen
                }))?))
            }
            _ => {
                panic!("Unable to parse!");
            }
        }
            // -> DefaultArrayField{loopType=LENGTH, loopExpression=DefaultBinaryTerm{a=DefaultUnaryTerm{a=DefaultBinaryTerm{a=DefaultVariableLiteral{name='headerLength', typeReference='null', args=null, index=null, child=null}, b=DefaultNumericLiteral{number=1}, operation='+'}, operation='()'}, b=DefaultVariableLiteral{name='curPos', typeReference='org.apache.plc4x.plugins.codegenerator.types.definitions.BuiltIns$1@282c4da0', args=null, index=null, child=null}, operation='-'}} DefaultTypedNamedField{name='parameters'} DefaultTypedField{type=org.apache.plc4x.plugins.codegenerator.language.mspec.model.references.DefaultArrayTypeReference@b506ed0} DefaultField{attributes={}}
            // -> DefaultOptionalField{conditionExpression=DefaultBinaryTerm{a=DefaultVariableLiteral{name='curPos', typeReference='org.apache.plc4x.plugins.codegenerator.types.definitions.BuiltIns$1@282c4da0', args=null, index=null, child=null}, b=DefaultVariableLiteral{name='cotpLen', typeReference='AbstractSimpleTypeReference{baseType=UINT, sizeInBits=16}', args=null, index=null, child=null}, operation='<'}} DefaultTypedNamedField{name='payload'} DefaultTypedField{type=DefaultComplexTypeReference{name='S7Message', params=null}} DefaultField{attributes={}}
    }
}


