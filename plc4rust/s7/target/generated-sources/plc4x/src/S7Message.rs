/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// package org.apache.plc4x.rust.s7.readwrite;

// Code generated by code-generation. DO NOT EDIT.
use std::io::{Error, ErrorKind, Read, Write};
use plc4rust::{Message, NoOption};
use plc4rust::read_buffer::ReadBuffer;
use plc4rust::write_buffer::WriteBuffer;

use crate::S7MessageRequest::S7MessageRequest;
use crate::S7MessageRequest::S7MessageRequestOptions;
use crate::S7MessageResponse::S7MessageResponse;
use crate::S7MessageResponse::S7MessageResponseOptions;
use crate::S7MessageResponseData::S7MessageResponseData;
use crate::S7MessageResponseData::S7MessageResponseDataOptions;
use crate::S7MessageUserData::S7MessageUserData;
use crate::S7MessageUserData::S7MessageUserDataOptions;
use crate::S7Parameter::S7Parameter;
use crate::S7Parameter::S7ParameterOptions;
use crate::S7Payload::S7Payload;
use crate::S7Payload::S7PayloadOptions;

#[derive(PartialEq, Debug, Clone)]
pub struct S7MessageOptions {
}

#[derive(PartialEq, Debug, Clone)]
pub enum S7Message {
    S7MessageRequest(S7MessageRequest),
    S7MessageResponse(S7MessageResponse),
    S7MessageResponseData(S7MessageResponseData),
    S7MessageUserData(S7MessageUserData)
}

impl Message for S7Message {
    type M = S7Message;
    type P = NoOption;

    fn get_length_in_bits(&self) -> u32 {
        todo!()
    }

    fn serialize<T: Write>(&self, writer: &mut WriteBuffer<T>) -> Result<usize, Error> {
        match self {
            S7Message::S7MessageRequest(msg) => {
                msg.serialize(writer)
            }
            S7Message::S7MessageResponse(msg) => {
                msg.serialize(writer)
            }
            S7Message::S7MessageResponseData(msg) => {
                msg.serialize(writer)
            }
            S7Message::S7MessageUserData(msg) => {
                msg.serialize(writer)
            }
        }
    }

    fn parse<T: Read>(reader: &mut ReadBuffer<T>, parameter: Option<Self::P>) -> Result<Self::M, Error> {
        // (Re-)define the options
        let parameter = parameter.unwrap();
            // -> DefaultConstField{referenceValue=DefaultHexadecimalLiteral{hexString=0x32}} DefaultTypedNamedField{name='protocolId'} DefaultTypedField{type=AbstractSimpleTypeReference{baseType=UINT, sizeInBits=8}} DefaultField{attributes={}}
        let messageType = reader.read_u8()?;
            // -> DefaultReservedField{referenceValue=0x0000} DefaultTypedField{type=AbstractSimpleTypeReference{baseType=UINT, sizeInBits=16}} DefaultField{attributes={}}
        let tpduReference = reader.read_u16()?;
            // -> DefaultImplicitField{serializeExpression=DefaultTernaryTerm{a=DefaultBinaryTerm{a=DefaultVariableLiteral{name='parameter', typeReference='DefaultComplexTypeReference{name='S7Parameter', params=[DefaultVariableLiteral{name='messageType', typeReference='AbstractSimpleTypeReference{baseType=UINT, sizeInBits=8}', args=null, index=null, child=null}]}', args=null, index=null, child=null}, b=DefaultNullLiteral{}, operation='!='}, b=DefaultVariableLiteral{name='parameter', typeReference='DefaultComplexTypeReference{name='S7Parameter', params=[DefaultVariableLiteral{name='messageType', typeReference='AbstractSimpleTypeReference{baseType=UINT, sizeInBits=8}', args=null, index=null, child=null}]}', args=null, index=null, child=DefaultVariableLiteral{name='lengthInBytes', typeReference='null', args=null, index=null, child=null}}, c=DefaultNumericLiteral{number=0}, operation='if'}} DefaultTypedNamedField{name='parameterLength'} DefaultTypedField{type=AbstractSimpleTypeReference{baseType=UINT, sizeInBits=16}} DefaultField{attributes={}}
            // -> DefaultImplicitField{serializeExpression=DefaultTernaryTerm{a=DefaultBinaryTerm{a=DefaultVariableLiteral{name='payload', typeReference='DefaultComplexTypeReference{name='S7Payload', params=[DefaultVariableLiteral{name='messageType', typeReference='AbstractSimpleTypeReference{baseType=UINT, sizeInBits=8}', args=null, index=null, child=null}, DefaultVariableLiteral{name='parameter', typeReference='DefaultComplexTypeReference{name='S7Parameter', params=null}', args=null, index=null, child=null}]}', args=null, index=null, child=null}, b=DefaultNullLiteral{}, operation='!='}, b=DefaultVariableLiteral{name='payload', typeReference='DefaultComplexTypeReference{name='S7Payload', params=[DefaultVariableLiteral{name='messageType', typeReference='AbstractSimpleTypeReference{baseType=UINT, sizeInBits=8}', args=null, index=null, child=null}, DefaultVariableLiteral{name='parameter', typeReference='DefaultComplexTypeReference{name='S7Parameter', params=null}', args=null, index=null, child=null}]}', args=null, index=null, child=DefaultVariableLiteral{name='lengthInBytes', typeReference='null', args=null, index=null, child=null}}, c=DefaultNumericLiteral{number=0}, operation='if'}} DefaultTypedNamedField{name='payloadLength'} DefaultTypedField{type=AbstractSimpleTypeReference{baseType=UINT, sizeInBits=16}} DefaultField{attributes={}}
        match (messageType) {
            (0x01) => {
                Ok(S7Message::S7MessageRequest(S7MessageRequest::parse::<T>(reader, Some(S7MessageRequestOptions {
                }))?))
            }
            (0x02) => {
                Ok(S7Message::S7MessageResponse(S7MessageResponse::parse::<T>(reader, Some(S7MessageResponseOptions {
                }))?))
            }
            (0x03) => {
                Ok(S7Message::S7MessageResponseData(S7MessageResponseData::parse::<T>(reader, Some(S7MessageResponseDataOptions {
                }))?))
            }
            (0x07) => {
                Ok(S7Message::S7MessageUserData(S7MessageUserData::parse::<T>(reader, Some(S7MessageUserDataOptions {
                }))?))
            }
            _ => {
                panic!("Unable to parse!");
            }
        }
            // -> DefaultOptionalField{conditionExpression=DefaultBinaryTerm{a=DefaultVariableLiteral{name='parameterLength', typeReference='null', args=null, index=null, child=null}, b=DefaultNumericLiteral{number=0}, operation='>'}} DefaultTypedNamedField{name='parameter'} DefaultTypedField{type=DefaultComplexTypeReference{name='S7Parameter', params=[DefaultVariableLiteral{name='messageType', typeReference='AbstractSimpleTypeReference{baseType=UINT, sizeInBits=8}', args=null, index=null, child=null}]}} DefaultField{attributes={}}
            // -> DefaultOptionalField{conditionExpression=DefaultBinaryTerm{a=DefaultVariableLiteral{name='payloadLength', typeReference='null', args=null, index=null, child=null}, b=DefaultNumericLiteral{number=0}, operation='>'}} DefaultTypedNamedField{name='payload'} DefaultTypedField{type=DefaultComplexTypeReference{name='S7Payload', params=[DefaultVariableLiteral{name='messageType', typeReference='AbstractSimpleTypeReference{baseType=UINT, sizeInBits=8}', args=null, index=null, child=null}, DefaultVariableLiteral{name='parameter', typeReference='DefaultComplexTypeReference{name='S7Parameter', params=null}', args=null, index=null, child=null}]}} DefaultField{attributes={}}
    }
}


