/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// package org.apache.plc4x.rust.s7.readwrite;

// Code generated by code-generation. DO NOT EDIT.
use std::io::{Error, ErrorKind, Read, Write};
use plc4rust::{Message, NoOption};
use plc4rust::read_buffer::ReadBuffer;
use plc4rust::write_buffer::WriteBuffer;

use crate::SyntaxIdType::SyntaxIdType;
use crate::State::State;
use crate::State::StateOptions;
use crate::State::State;
use crate::State::StateOptions;
use crate::State::State;
use crate::State::StateOptions;
use crate::State::State;
use crate::State::StateOptions;
use crate::AssociatedValueType::AssociatedValueType;
use crate::AssociatedValueType::AssociatedValueTypeOptions;

#[derive(PartialEq, Debug, Clone)]
pub struct AlarmMessageObjectPushTypeOptions {
}
#[derive(PartialEq, Debug, Clone)]
pub struct AlarmMessageObjectPushType {
    // Intentionally do nothing
    pub lengthSpec: u8,
    pub syntaxId: SyntaxIdType,
    pub numberOfValues: u8,
    pub eventId: u32,
    pub eventState: State,
    pub localState: State,
    pub ackStateGoing: State,
    pub ackStateComing: State,
    pub AssociatedValues: Vec<AssociatedValueType>
}

impl AlarmMessageObjectPushType {
}

impl Message for AlarmMessageObjectPushType {
    type M = AlarmMessageObjectPushType;
    type P = AlarmMessageObjectPushTypeOptions;

    fn get_length_in_bits(&self) -> u32 {
        todo!()
    }

    fn serialize<T: Write>(&self, writer: &mut WriteBuffer<T>) -> Result<usize, Error> {
        writer.write_u8(0x12)?;
        writer.write_u8(self.lengthSpec)?;
        self.syntaxId.serialize(writer)?;
        writer.write_u8(self.numberOfValues)?;
        writer.write_u32(self.eventId)?;
        self.eventState.serialize(writer)?;
        self.localState.serialize(writer)?;
        self.ackStateGoing.serialize(writer)?;
        self.ackStateComing.serialize(writer)?;
        // not handled yet;
        Ok(0)
    }

    fn parse<T: Read>(reader: &mut ReadBuffer<T>, parameter: Option<Self::P>) -> Result<Self::M, Error> {
        // (Re-)define the options
        let parameter = parameter.unwrap();
        let variableSpec = reader.read_u8()?;
        // assert value of constant
        assert_eq!(0x12, variableSpec);
        let lengthSpec = reader.read_u8()?;
        let syntaxId = SyntaxIdType::parse(reader, None)?;
        let numberOfValues = reader.read_u8()?;
        let eventId = reader.read_u32()?;
        let eventState = State::parse(reader, Some(StateOptions {  }))?;
        let localState = State::parse(reader, Some(StateOptions {  }))?;
        let ackStateGoing = State::parse(reader, Some(StateOptions {  }))?;
        let ackStateComing = State::parse(reader, Some(StateOptions {  }))?;
        let AssociatedValues = vec![];
        let AssociatedValues_read = 0 as usize;
        // for _ in 0..(DefaultVariableLiteral{name='numberOfValues', typeReference='AbstractSimpleTypeReference{baseType=UINT, sizeInBits=8}', args=null, index=null, child=null}) {
            // do something
        // }
        Ok(Self::M {
            lengthSpec,
            syntaxId,
            numberOfValues,
            eventId,
            eventState,
            localState,
            ackStateGoing,
            ackStateComing,
            AssociatedValues
        })
    }
}


