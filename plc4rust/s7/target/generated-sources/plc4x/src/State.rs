/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// package org.apache.plc4x.rust.s7.readwrite;

// Code generated by code-generation. DO NOT EDIT.
use std::io::{Error, ErrorKind, Read, Write};
use plc4rust::{Message, NoOption};
use plc4rust::read_buffer::ReadBuffer;
use plc4rust::write_buffer::WriteBuffer;


#[derive(PartialEq, Debug, Clone)]
pub struct StateOptions {
}

#[derive(PartialEq, Debug, Clone)]
pub struct State {
    pub SIG_8: bool,
    pub SIG_7: bool,
    pub SIG_6: bool,
    pub SIG_5: bool,
    pub SIG_4: bool,
    pub SIG_3: bool,
    pub SIG_2: bool,
    pub SIG_1: bool
}

impl State {
}

impl Message for State {
    type M = State;
    type P = StateOptions;

    fn get_length_in_bits(&self) -> u32 {
        todo!()
    }

    fn serialize<T: Write>(&self, writer: &mut WriteBuffer<T>) -> Result<usize, Error> {
        writer.write_bit(self.SIG_8)?;
        writer.write_bit(self.SIG_7)?;
        writer.write_bit(self.SIG_6)?;
        writer.write_bit(self.SIG_5)?;
        writer.write_bit(self.SIG_4)?;
        writer.write_bit(self.SIG_3)?;
        writer.write_bit(self.SIG_2)?;
        writer.write_bit(self.SIG_1)?;
        Ok(0)
    }

    fn parse<T: Read>(reader: &mut ReadBuffer<T>, parameter: Option<Self::P>) -> Result<Self::M, Error> {
        // (Re-)define the options
        let parameter = parameter.unwrap();
        let SIG_8 = reader.read_bit()?;
        let SIG_7 = reader.read_bit()?;
        let SIG_6 = reader.read_bit()?;
        let SIG_5 = reader.read_bit()?;
        let SIG_4 = reader.read_bit()?;
        let SIG_3 = reader.read_bit()?;
        let SIG_2 = reader.read_bit()?;
        let SIG_1 = reader.read_bit()?;
        Ok(Self::M {
            SIG_8,
            SIG_7,
            SIG_6,
            SIG_5,
            SIG_4,
            SIG_3,
            SIG_2,
            SIG_1
        })
    }
}


