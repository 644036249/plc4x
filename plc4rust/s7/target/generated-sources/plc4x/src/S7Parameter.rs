/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// package org.apache.plc4x.rust.s7.readwrite;

// Code generated by code-generation. DO NOT EDIT.
use std::io::{Error, ErrorKind, Read, Write};
use plc4rust::{Message, NoOption};
use plc4rust::read_buffer::ReadBuffer;
use plc4rust::write_buffer::WriteBuffer;

use crate::S7ParameterSetupCommunication::S7ParameterSetupCommunication;
use crate::S7ParameterSetupCommunication::S7ParameterSetupCommunicationOptions;
use crate::S7ParameterReadVarRequest::S7ParameterReadVarRequest;
use crate::S7ParameterReadVarRequest::S7ParameterReadVarRequestOptions;
use crate::S7ParameterReadVarResponse::S7ParameterReadVarResponse;
use crate::S7ParameterReadVarResponse::S7ParameterReadVarResponseOptions;
use crate::S7ParameterWriteVarRequest::S7ParameterWriteVarRequest;
use crate::S7ParameterWriteVarRequest::S7ParameterWriteVarRequestOptions;
use crate::S7ParameterWriteVarResponse::S7ParameterWriteVarResponse;
use crate::S7ParameterWriteVarResponse::S7ParameterWriteVarResponseOptions;
use crate::S7ParameterUserData::S7ParameterUserData;
use crate::S7ParameterUserData::S7ParameterUserDataOptions;
use crate::S7ParameterModeTransition::S7ParameterModeTransition;
use crate::S7ParameterModeTransition::S7ParameterModeTransitionOptions;

#[derive(PartialEq, Debug, Clone)]
pub struct S7ParameterOptions {
    pub messageType: u8
}
#[derive(PartialEq, Debug, Clone)]
pub enum S7Parameter {
    S7ParameterSetupCommunication(S7ParameterSetupCommunication),
    S7ParameterReadVarRequest(S7ParameterReadVarRequest),
    S7ParameterReadVarResponse(S7ParameterReadVarResponse),
    S7ParameterWriteVarRequest(S7ParameterWriteVarRequest),
    S7ParameterWriteVarResponse(S7ParameterWriteVarResponse),
    S7ParameterUserData(S7ParameterUserData),
    S7ParameterModeTransition(S7ParameterModeTransition)
}

impl Message for S7Parameter {
    type M = S7Parameter;
    type P = S7ParameterOptions;

    fn get_length_in_bits(&self) -> u32 {
        todo!()
    }

    fn serialize<T: Write>(&self, writer: &mut WriteBuffer<T>) -> Result<usize, Error> {
        match self {
            S7Parameter::S7ParameterSetupCommunication(msg) => {
                msg.serialize(writer)
            }
            S7Parameter::S7ParameterReadVarRequest(msg) => {
                msg.serialize(writer)
            }
            S7Parameter::S7ParameterReadVarResponse(msg) => {
                msg.serialize(writer)
            }
            S7Parameter::S7ParameterWriteVarRequest(msg) => {
                msg.serialize(writer)
            }
            S7Parameter::S7ParameterWriteVarResponse(msg) => {
                msg.serialize(writer)
            }
            S7Parameter::S7ParameterUserData(msg) => {
                msg.serialize(writer)
            }
            S7Parameter::S7ParameterModeTransition(msg) => {
                msg.serialize(writer)
            }
        }
    }

    fn parse<T: Read>(reader: &mut ReadBuffer<T>, parameter: Option<Self::P>) -> Result<Self::M, Error> {
        // (Re-)define the options
        let parameter = parameter.unwrap();
        let messageType = parameter.messageType;
        let parameterType = reader.read_u8()?;
        match (parameterType, messageType) {
            (0xF0, _) => {
                Ok(S7Parameter::S7ParameterSetupCommunication(S7ParameterSetupCommunication::parse::<T>(reader, Some(S7ParameterSetupCommunicationOptions {
                    messageType
                }))?))
            }
            (0x04, 0x01) => {
                Ok(S7Parameter::S7ParameterReadVarRequest(S7ParameterReadVarRequest::parse::<T>(reader, Some(S7ParameterReadVarRequestOptions {
                    messageType
                }))?))
            }
            (0x04, 0x03) => {
                Ok(S7Parameter::S7ParameterReadVarResponse(S7ParameterReadVarResponse::parse::<T>(reader, Some(S7ParameterReadVarResponseOptions {
                    messageType
                }))?))
            }
            (0x05, 0x01) => {
                Ok(S7Parameter::S7ParameterWriteVarRequest(S7ParameterWriteVarRequest::parse::<T>(reader, Some(S7ParameterWriteVarRequestOptions {
                    messageType
                }))?))
            }
            (0x05, 0x03) => {
                Ok(S7Parameter::S7ParameterWriteVarResponse(S7ParameterWriteVarResponse::parse::<T>(reader, Some(S7ParameterWriteVarResponseOptions {
                    messageType
                }))?))
            }
            (0x00, 0x07) => {
                Ok(S7Parameter::S7ParameterUserData(S7ParameterUserData::parse::<T>(reader, Some(S7ParameterUserDataOptions {
                    messageType
                }))?))
            }
            (0x01, 0x07) => {
                Ok(S7Parameter::S7ParameterModeTransition(S7ParameterModeTransition::parse::<T>(reader, Some(S7ParameterModeTransitionOptions {
                    messageType
                }))?))
            }
            _ => {
                panic!("Unable to parse!");
            }
        }
    }
}


