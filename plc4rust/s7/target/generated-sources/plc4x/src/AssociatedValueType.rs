/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// package org.apache.plc4x.rust.s7.readwrite;

// Code generated by code-generation. DO NOT EDIT.
use std::io::{Error, ErrorKind, Read, Write};
use plc4rust::{Message, NoOption};
use plc4rust::read_buffer::ReadBuffer;
use plc4rust::write_buffer::WriteBuffer;

use crate::DataTransportErrorCode::DataTransportErrorCode;
use crate::DataTransportSize::DataTransportSize;

#[derive(PartialEq, Debug, Clone)]
pub struct AssociatedValueTypeOptions {
}

#[derive(PartialEq, Debug, Clone)]
pub struct AssociatedValueType {
    pub returnCode: DataTransportErrorCode,
    pub transportSize: DataTransportSize,
        // -> DefaultManualField{parseExpression=DefaultVariableLiteral{name='STATIC_CALL', typeReference='null', args=[DefaultStringLiteral{value='RightShift3'}, DefaultVariableLiteral{name='readBuffer', typeReference='null', args=null, index=null, child=null}], index=null, child=null}, serializeExpression=DefaultVariableLiteral{name='STATIC_CALL', typeReference='null', args=[DefaultStringLiteral{value='LeftShift3'}, DefaultVariableLiteral{name='writeBuffer', typeReference='null', args=null, index=null, child=null}, DefaultVariableLiteral{name='valueLength', typeReference='null', args=null, index=null, child=null}], index=null, child=null}, lengthExpression=DefaultNumericLiteral{number=16}} DefaultTypedNamedField{name='valueLength'} DefaultTypedField{type=AbstractSimpleTypeReference{baseType=UINT, sizeInBits=16}} DefaultField{attributes={}}
    pub data: Vec<u8>
}

impl AssociatedValueType {
}

impl Message for AssociatedValueType {
    type M = AssociatedValueType;
    type P = AssociatedValueTypeOptions;

    fn get_length_in_bits(&self) -> u32 {
        todo!()
    }

    fn serialize<T: Write>(&self, writer: &mut WriteBuffer<T>) -> Result<usize, Error> {
        self.returnCode.serialize(writer)?;
        self.transportSize.serialize(writer)?;
        writer.write_u16(self.valueLength)?;
        // not handled yet;
        Ok(0)
    }

    fn parse<T: Read>(reader: &mut ReadBuffer<T>, parameter: Option<Self::P>) -> Result<Self::M, Error> {
        // (Re-)define the options
        let parameter = parameter.unwrap();
        let returnCode = DataTransportErrorCode::parse(reader, None)?;
        let transportSize = DataTransportSize::parse(reader, None)?;
        let valueLength = reader.read_u16()?;
        let data = vec![];
        let data_read = 0 as usize;
        // for _ in 0..(DefaultVariableLiteral{name='STATIC_CALL', typeReference='null', args=[DefaultStringLiteral{value='EventItemLength'}, DefaultVariableLiteral{name='readBuffer', typeReference='null', args=null, index=null, child=null}, DefaultVariableLiteral{name='valueLength', typeReference='null', args=null, index=null, child=null}], index=null, child=null}) {
            // do something
        // }
        Ok(Self::M {
            returnCode,
            transportSize,
            valueLength,
            data
        })
    }
}


