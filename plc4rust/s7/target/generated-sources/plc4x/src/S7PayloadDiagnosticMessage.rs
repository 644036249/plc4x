/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// package org.apache.plc4x.rust.s7.readwrite;

// Code generated by code-generation. DO NOT EDIT.
use std::io::{Error, ErrorKind, Read, Write};
use plc4rust::{Message, NoOption};
use plc4rust::read_buffer::ReadBuffer;
use plc4rust::write_buffer::WriteBuffer;

use crate::DateAndTime::DateAndTime;
use crate::DateAndTime::DateAndTimeOptions;

#[derive(PartialEq, Debug, Clone)]
pub struct S7PayloadDiagnosticMessageOptions {
    pub cpuFunctionType: u8, 
    pub cpuSubfunction: u8
}

#[derive(PartialEq, Debug, Clone)]
pub struct S7PayloadDiagnosticMessage {
    pub EventId: u16,
    pub PriorityClass: u8,
    pub ObNumber: u8,
    pub DatId: u16,
    pub Info1: u16,
    pub Info2: u32,
    pub TimeStamp: DateAndTime
}

impl S7PayloadDiagnosticMessage {
}

impl Message for S7PayloadDiagnosticMessage {
    type M = S7PayloadDiagnosticMessage;
    type P = S7PayloadDiagnosticMessageOptions;

    fn get_length_in_bits(&self) -> u32 {
        todo!()
    }

    fn serialize<T: Write>(&self, writer: &mut WriteBuffer<T>) -> Result<usize, Error> {
        writer.write_u16(self.EventId)?;
        writer.write_u8(self.PriorityClass)?;
        writer.write_u8(self.ObNumber)?;
        writer.write_u16(self.DatId)?;
        writer.write_u16(self.Info1)?;
        writer.write_u32(self.Info2)?;
        self.TimeStamp.serialize(writer)?;
        Ok(0)
    }

    fn parse<T: Read>(reader: &mut ReadBuffer<T>, parameter: Option<Self::P>) -> Result<Self::M, Error> {
        // (Re-)define the options
        let parameter = parameter.unwrap();
        let cpuFunctionType = parameter.cpuFunctionType;
        let cpuSubfunction = parameter.cpuSubfunction;
        let EventId = reader.read_u16()?;
        let PriorityClass = reader.read_u8()?;
        let ObNumber = reader.read_u8()?;
        let DatId = reader.read_u16()?;
        let Info1 = reader.read_u16()?;
        let Info2 = reader.read_u32()?;
        let TimeStamp = DateAndTime::parse(reader, Some(DateAndTimeOptions {  }))?;
        Ok(Self::M {
            EventId,
            PriorityClass,
            ObNumber,
            DatId,
            Info1,
            Info2,
            TimeStamp
        })
    }
}


