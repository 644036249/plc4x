/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.eip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class CipConnectedResponse extends CipService implements Message {

  // Accessors for discriminator values.
  public Short getService() {
    return (short) 0x52;
  }

  public Boolean getResponse() {
    return (boolean) true;
  }

  public Boolean getConnected() {
    return false;
  }

  // Properties.
  protected final short status;
  protected final short additionalStatusWords;
  protected final CIPDataConnected data;

  // Arguments.
  protected final Integer serviceLen;
  protected final IntegerEncoding order;
  // Reserved Fields
  private Short reservedField0;

  public CipConnectedResponse(
      short status,
      short additionalStatusWords,
      CIPDataConnected data,
      Integer serviceLen,
      IntegerEncoding order) {
    super(serviceLen, order);
    this.status = status;
    this.additionalStatusWords = additionalStatusWords;
    this.data = data;
    this.serviceLen = serviceLen;
    this.order = order;
  }

  public short getStatus() {
    return status;
  }

  public short getAdditionalStatusWords() {
    return additionalStatusWords;
  }

  public CIPDataConnected getData() {
    return data;
  }

  @Override
  protected void serializeCipServiceChild(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    int startPos = positionAware.getPos();
    writeBuffer.pushContext("CipConnectedResponse");

    // Reserved Field (reserved)
    writeReservedField(
        "reserved",
        reservedField0 != null ? reservedField0 : (short) 0x00,
        writeUnsignedShort(writeBuffer, 8));

    // Simple Field (status)
    writeSimpleField(
        "status",
        status,
        writeUnsignedShort(writeBuffer, 8),
        WithOption.WithByteOrder(
            (((order) == (IntegerEncoding.BIG_ENDIAN))
                ? ByteOrder.BIG_ENDIAN
                : ByteOrder.LITTLE_ENDIAN)));

    // Simple Field (additionalStatusWords)
    writeSimpleField(
        "additionalStatusWords",
        additionalStatusWords,
        writeUnsignedShort(writeBuffer, 8),
        WithOption.WithByteOrder(
            (((order) == (IntegerEncoding.BIG_ENDIAN))
                ? ByteOrder.BIG_ENDIAN
                : ByteOrder.LITTLE_ENDIAN)));

    // Optional Field (data) (Can be skipped, if the value is null)
    writeOptionalField(
        "data", data, new DataWriterComplexDefault<>(writeBuffer), (((serviceLen) - (4))) > (0));

    writeBuffer.popContext("CipConnectedResponse");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = super.getLengthInBits();
    CipConnectedResponse _value = this;

    // Reserved Field (reserved)
    lengthInBits += 8;

    // Simple field (status)
    lengthInBits += 8;

    // Simple field (additionalStatusWords)
    lengthInBits += 8;

    // Optional Field (data)
    if (data != null) {
      lengthInBits += data.getLengthInBits();
    }

    return lengthInBits;
  }

  public static CipConnectedResponseBuilder staticParseBuilder(
      ReadBuffer readBuffer, Boolean connected, Integer serviceLen, IntegerEncoding order)
      throws ParseException {
    readBuffer.pullContext("CipConnectedResponse");
    PositionAware positionAware = readBuffer;
    int startPos = positionAware.getPos();
    int curPos;

    Short reservedField0 =
        readReservedField(
            "reserved",
            readUnsignedShort(readBuffer, 8),
            (short) 0x00,
            WithOption.WithByteOrder(
                (((order) == (IntegerEncoding.BIG_ENDIAN))
                    ? ByteOrder.BIG_ENDIAN
                    : ByteOrder.LITTLE_ENDIAN)));

    short status =
        readSimpleField(
            "status",
            readUnsignedShort(readBuffer, 8),
            WithOption.WithByteOrder(
                (((order) == (IntegerEncoding.BIG_ENDIAN))
                    ? ByteOrder.BIG_ENDIAN
                    : ByteOrder.LITTLE_ENDIAN)));

    short additionalStatusWords =
        readSimpleField(
            "additionalStatusWords",
            readUnsignedShort(readBuffer, 8),
            WithOption.WithByteOrder(
                (((order) == (IntegerEncoding.BIG_ENDIAN))
                    ? ByteOrder.BIG_ENDIAN
                    : ByteOrder.LITTLE_ENDIAN)));

    CIPDataConnected data =
        readOptionalField(
            "data",
            new DataReaderComplexDefault<>(
                () -> CIPDataConnected.staticParse(readBuffer, (int) (serviceLen)), readBuffer),
            (((serviceLen) - (4))) > (0),
            WithOption.WithByteOrder(
                (((order) == (IntegerEncoding.BIG_ENDIAN))
                    ? ByteOrder.BIG_ENDIAN
                    : ByteOrder.LITTLE_ENDIAN)));

    readBuffer.closeContext("CipConnectedResponse");
    // Create the instance
    return new CipConnectedResponseBuilder(
        status, additionalStatusWords, data, serviceLen, order, reservedField0);
  }

  public static class CipConnectedResponseBuilder implements CipService.CipServiceBuilder {
    private final short status;
    private final short additionalStatusWords;
    private final CIPDataConnected data;
    private final Integer serviceLen;
    private final IntegerEncoding order;
    private final Short reservedField0;

    public CipConnectedResponseBuilder(
        short status,
        short additionalStatusWords,
        CIPDataConnected data,
        Integer serviceLen,
        IntegerEncoding order,
        Short reservedField0) {
      this.status = status;
      this.additionalStatusWords = additionalStatusWords;
      this.data = data;
      this.serviceLen = serviceLen;
      this.order = order;
      this.reservedField0 = reservedField0;
    }

    public CipConnectedResponse build(Integer serviceLen, IntegerEncoding order) {

      CipConnectedResponse cipConnectedResponse =
          new CipConnectedResponse(status, additionalStatusWords, data, serviceLen, order);
      cipConnectedResponse.reservedField0 = reservedField0;
      return cipConnectedResponse;
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof CipConnectedResponse)) {
      return false;
    }
    CipConnectedResponse that = (CipConnectedResponse) o;
    return (getStatus() == that.getStatus())
        && (getAdditionalStatusWords() == that.getAdditionalStatusWords())
        && (getData() == that.getData())
        && super.equals(that)
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode(), getStatus(), getAdditionalStatusWords(), getData());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
