/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.eip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class PortSegment extends PathSegment implements Message {

  // Accessors for discriminator values.
  public Byte getPathSegment() {
    return (byte) 0x00;
  }

  // Properties.
  protected final PortSegmentType segmentType;

  // Arguments.
  protected final IntegerEncoding order;

  public PortSegment(PortSegmentType segmentType, IntegerEncoding order) {
    super(order);
    this.segmentType = segmentType;
    this.order = order;
  }

  public PortSegmentType getSegmentType() {
    return segmentType;
  }

  @Override
  protected void serializePathSegmentChild(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    int startPos = positionAware.getPos();
    writeBuffer.pushContext("PortSegment");

    // Simple Field (segmentType)
    writeSimpleField(
        "segmentType",
        segmentType,
        new DataWriterComplexDefault<>(writeBuffer),
        WithOption.WithByteOrder(
            (((order) == (IntegerEncoding.BIG_ENDIAN))
                ? ByteOrder.BIG_ENDIAN
                : ByteOrder.LITTLE_ENDIAN)));

    writeBuffer.popContext("PortSegment");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = super.getLengthInBits();
    PortSegment _value = this;

    // Simple field (segmentType)
    lengthInBits += segmentType.getLengthInBits();

    return lengthInBits;
  }

  public static PortSegmentBuilder staticParseBuilder(ReadBuffer readBuffer, IntegerEncoding order)
      throws ParseException {
    readBuffer.pullContext("PortSegment");
    PositionAware positionAware = readBuffer;
    int startPos = positionAware.getPos();
    int curPos;

    PortSegmentType segmentType =
        readSimpleField(
            "segmentType",
            new DataReaderComplexDefault<>(
                () -> PortSegmentType.staticParse(readBuffer, (IntegerEncoding) (order)),
                readBuffer),
            WithOption.WithByteOrder(
                (((order) == (IntegerEncoding.BIG_ENDIAN))
                    ? ByteOrder.BIG_ENDIAN
                    : ByteOrder.LITTLE_ENDIAN)));

    readBuffer.closeContext("PortSegment");
    // Create the instance
    return new PortSegmentBuilder(segmentType, order);
  }

  public static class PortSegmentBuilder implements PathSegment.PathSegmentBuilder {
    private final PortSegmentType segmentType;
    private final IntegerEncoding order;

    public PortSegmentBuilder(PortSegmentType segmentType, IntegerEncoding order) {

      this.segmentType = segmentType;
      this.order = order;
    }

    public PortSegment build(IntegerEncoding order) {

      PortSegment portSegment = new PortSegment(segmentType, order);
      return portSegment;
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof PortSegment)) {
      return false;
    }
    PortSegment that = (PortSegment) o;
    return (getSegmentType() == that.getSegmentType()) && super.equals(that) && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode(), getSegmentType());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
