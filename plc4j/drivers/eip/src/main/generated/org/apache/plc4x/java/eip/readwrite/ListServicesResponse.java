/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.eip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class ListServicesResponse extends EipPacket implements Message {

  // Accessors for discriminator values.
  public Integer getCommand() {
    return (int) 0x0004;
  }

  public Boolean getResponse() {
    return (boolean) true;
  }

  public Integer getPacketLength() {
    return 0;
  }

  // Properties.
  protected final int itemCount;
  protected final List<TypeId> typeId;

  // Arguments.
  protected final IntegerEncoding order;

  public ListServicesResponse(
      long sessionHandle,
      long status,
      byte[] senderContext,
      long options,
      int itemCount,
      List<TypeId> typeId,
      IntegerEncoding order) {
    super(sessionHandle, status, senderContext, options, order);
    this.itemCount = itemCount;
    this.typeId = typeId;
    this.order = order;
  }

  public int getItemCount() {
    return itemCount;
  }

  public List<TypeId> getTypeId() {
    return typeId;
  }

  @Override
  protected void serializeEipPacketChild(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();
    int startPos = positionAware.getPos();
    writeBuffer.pushContext("ListServicesResponse");

    // Simple Field (itemCount)
    writeSimpleField(
        "itemCount",
        itemCount,
        writeUnsignedInt(writeBuffer, 16),
        WithOption.WithByteOrder(
            (((order) == (IntegerEncoding.BIG_ENDIAN))
                ? ByteOrder.BIG_ENDIAN
                : ByteOrder.LITTLE_ENDIAN)));

    // Array Field (typeId)
    writeComplexTypeArrayField(
        "typeId",
        typeId,
        writeBuffer,
        WithOption.WithByteOrder(
            (((order) == (IntegerEncoding.BIG_ENDIAN))
                ? ByteOrder.BIG_ENDIAN
                : ByteOrder.LITTLE_ENDIAN)));

    writeBuffer.popContext("ListServicesResponse");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = super.getLengthInBits();
    ListServicesResponse _value = this;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    // Simple field (itemCount)
    lengthInBits += 16;

    // Array field
    if (typeId != null) {
      int i = 0;
      for (TypeId element : typeId) {
        ThreadLocalHelper.lastItemThreadLocal.set(++i >= typeId.size());
        lengthInBits += element.getLengthInBits();
      }
    }

    return lengthInBits;
  }

  public static EipPacketBuilder staticParseEipPacketBuilder(
      ReadBuffer readBuffer, IntegerEncoding order, Boolean response) throws ParseException {
    readBuffer.pullContext("ListServicesResponse");
    PositionAware positionAware = readBuffer;
    int startPos = positionAware.getPos();
    int curPos;
    boolean _lastItem = ThreadLocalHelper.lastItemThreadLocal.get();

    int itemCount =
        readSimpleField(
            "itemCount",
            readUnsignedInt(readBuffer, 16),
            WithOption.WithByteOrder(
                (((order) == (IntegerEncoding.BIG_ENDIAN))
                    ? ByteOrder.BIG_ENDIAN
                    : ByteOrder.LITTLE_ENDIAN)));

    List<TypeId> typeId =
        readCountArrayField(
            "typeId",
            new DataReaderComplexDefault<>(
                () -> TypeId.staticParse(readBuffer, (IntegerEncoding) (order)), readBuffer),
            itemCount,
            WithOption.WithByteOrder(
                (((order) == (IntegerEncoding.BIG_ENDIAN))
                    ? ByteOrder.BIG_ENDIAN
                    : ByteOrder.LITTLE_ENDIAN)));

    readBuffer.closeContext("ListServicesResponse");
    // Create the instance
    return new ListServicesResponseBuilderImpl(itemCount, typeId, order);
  }

  public static class ListServicesResponseBuilderImpl implements EipPacket.EipPacketBuilder {
    private final int itemCount;
    private final List<TypeId> typeId;
    private final IntegerEncoding order;

    public ListServicesResponseBuilderImpl(
        int itemCount, List<TypeId> typeId, IntegerEncoding order) {
      this.itemCount = itemCount;
      this.typeId = typeId;
      this.order = order;
    }

    public ListServicesResponse build(
        long sessionHandle,
        long status,
        byte[] senderContext,
        long options,
        IntegerEncoding order) {
      ListServicesResponse listServicesResponse =
          new ListServicesResponse(
              sessionHandle, status, senderContext, options, itemCount, typeId, order);
      return listServicesResponse;
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof ListServicesResponse)) {
      return false;
    }
    ListServicesResponse that = (ListServicesResponse) o;
    return (getItemCount() == that.getItemCount())
        && (getTypeId() == that.getTypeId())
        && super.equals(that)
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode(), getItemCount(), getTypeId());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
