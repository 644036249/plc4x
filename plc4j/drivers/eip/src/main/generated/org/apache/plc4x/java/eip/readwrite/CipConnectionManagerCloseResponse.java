/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.eip.readwrite;

import static org.apache.plc4x.java.spi.codegen.fields.FieldReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.fields.FieldWriterFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataReaderFactory.*;
import static org.apache.plc4x.java.spi.codegen.io.DataWriterFactory.*;
import static org.apache.plc4x.java.spi.generation.StaticHelper.*;

import java.time.*;
import java.util.*;
import org.apache.plc4x.java.api.exceptions.*;
import org.apache.plc4x.java.api.value.*;
import org.apache.plc4x.java.spi.codegen.*;
import org.apache.plc4x.java.spi.codegen.fields.*;
import org.apache.plc4x.java.spi.codegen.io.*;
import org.apache.plc4x.java.spi.generation.*;

// Code generated by code-generation. DO NOT EDIT.

public class CipConnectionManagerCloseResponse extends CipService implements Message {

  // Accessors for discriminator values.
  public Short getService() {
    return (short) 0x4E;
  }

  public Boolean getResponse() {
    return (boolean) true;
  }

  public Boolean getConnected() {
    return false;
  }

  // Properties.
  protected final short status;
  protected final short additionalStatusWords;
  protected final int connectionSerialNumber;
  protected final int originatorVendorId;
  protected final long originatorSerialNumber;
  protected final short applicationReplySize;

  // Arguments.
  protected final Integer serviceLen;
  protected final IntegerEncoding order;
  // Reserved Fields
  private Short reservedField0;
  private Short reservedField1;

  public CipConnectionManagerCloseResponse(
      short status,
      short additionalStatusWords,
      int connectionSerialNumber,
      int originatorVendorId,
      long originatorSerialNumber,
      short applicationReplySize,
      Integer serviceLen,
      IntegerEncoding order) {
    super(serviceLen, order);
    this.status = status;
    this.additionalStatusWords = additionalStatusWords;
    this.connectionSerialNumber = connectionSerialNumber;
    this.originatorVendorId = originatorVendorId;
    this.originatorSerialNumber = originatorSerialNumber;
    this.applicationReplySize = applicationReplySize;
    this.serviceLen = serviceLen;
    this.order = order;
  }

  public short getStatus() {
    return status;
  }

  public short getAdditionalStatusWords() {
    return additionalStatusWords;
  }

  public int getConnectionSerialNumber() {
    return connectionSerialNumber;
  }

  public int getOriginatorVendorId() {
    return originatorVendorId;
  }

  public long getOriginatorSerialNumber() {
    return originatorSerialNumber;
  }

  public short getApplicationReplySize() {
    return applicationReplySize;
  }

  @Override
  protected void serializeCipServiceChild(WriteBuffer writeBuffer) throws SerializationException {
    PositionAware positionAware = writeBuffer;
    int startPos = positionAware.getPos();
    writeBuffer.pushContext("CipConnectionManagerCloseResponse");

    // Reserved Field (reserved)
    writeReservedField(
        "reserved",
        reservedField0 != null ? reservedField0 : (short) 0x00,
        writeUnsignedShort(writeBuffer, 8));

    // Simple Field (status)
    writeSimpleField(
        "status",
        status,
        writeUnsignedShort(writeBuffer, 8),
        WithOption.WithByteOrder(
            (((order) == (IntegerEncoding.BIG_ENDIAN))
                ? ByteOrder.BIG_ENDIAN
                : ByteOrder.LITTLE_ENDIAN)));

    // Simple Field (additionalStatusWords)
    writeSimpleField(
        "additionalStatusWords",
        additionalStatusWords,
        writeUnsignedShort(writeBuffer, 8),
        WithOption.WithByteOrder(
            (((order) == (IntegerEncoding.BIG_ENDIAN))
                ? ByteOrder.BIG_ENDIAN
                : ByteOrder.LITTLE_ENDIAN)));

    // Simple Field (connectionSerialNumber)
    writeSimpleField(
        "connectionSerialNumber",
        connectionSerialNumber,
        writeUnsignedInt(writeBuffer, 16),
        WithOption.WithByteOrder(
            (((order) == (IntegerEncoding.BIG_ENDIAN))
                ? ByteOrder.BIG_ENDIAN
                : ByteOrder.LITTLE_ENDIAN)));

    // Simple Field (originatorVendorId)
    writeSimpleField(
        "originatorVendorId",
        originatorVendorId,
        writeUnsignedInt(writeBuffer, 16),
        WithOption.WithByteOrder(
            (((order) == (IntegerEncoding.BIG_ENDIAN))
                ? ByteOrder.BIG_ENDIAN
                : ByteOrder.LITTLE_ENDIAN)));

    // Simple Field (originatorSerialNumber)
    writeSimpleField(
        "originatorSerialNumber",
        originatorSerialNumber,
        writeUnsignedLong(writeBuffer, 32),
        WithOption.WithByteOrder(
            (((order) == (IntegerEncoding.BIG_ENDIAN))
                ? ByteOrder.BIG_ENDIAN
                : ByteOrder.LITTLE_ENDIAN)));

    // Simple Field (applicationReplySize)
    writeSimpleField(
        "applicationReplySize",
        applicationReplySize,
        writeUnsignedShort(writeBuffer, 8),
        WithOption.WithByteOrder(
            (((order) == (IntegerEncoding.BIG_ENDIAN))
                ? ByteOrder.BIG_ENDIAN
                : ByteOrder.LITTLE_ENDIAN)));

    // Reserved Field (reserved)
    writeReservedField(
        "reserved",
        reservedField1 != null ? reservedField1 : (short) 0x00,
        writeUnsignedShort(writeBuffer, 8));

    writeBuffer.popContext("CipConnectionManagerCloseResponse");
  }

  @Override
  public int getLengthInBytes() {
    return (int) Math.ceil((float) getLengthInBits() / 8.0);
  }

  @Override
  public int getLengthInBits() {
    int lengthInBits = super.getLengthInBits();
    CipConnectionManagerCloseResponse _value = this;

    // Reserved Field (reserved)
    lengthInBits += 8;

    // Simple field (status)
    lengthInBits += 8;

    // Simple field (additionalStatusWords)
    lengthInBits += 8;

    // Simple field (connectionSerialNumber)
    lengthInBits += 16;

    // Simple field (originatorVendorId)
    lengthInBits += 16;

    // Simple field (originatorSerialNumber)
    lengthInBits += 32;

    // Simple field (applicationReplySize)
    lengthInBits += 8;

    // Reserved Field (reserved)
    lengthInBits += 8;

    return lengthInBits;
  }

  public static CipConnectionManagerCloseResponseBuilder staticParseBuilder(
      ReadBuffer readBuffer, Boolean connected, Integer serviceLen, IntegerEncoding order)
      throws ParseException {
    readBuffer.pullContext("CipConnectionManagerCloseResponse");
    PositionAware positionAware = readBuffer;
    int startPos = positionAware.getPos();
    int curPos;

    Short reservedField0 =
        readReservedField(
            "reserved",
            readUnsignedShort(readBuffer, 8),
            (short) 0x00,
            WithOption.WithByteOrder(
                (((order) == (IntegerEncoding.BIG_ENDIAN))
                    ? ByteOrder.BIG_ENDIAN
                    : ByteOrder.LITTLE_ENDIAN)));

    short status =
        readSimpleField(
            "status",
            readUnsignedShort(readBuffer, 8),
            WithOption.WithByteOrder(
                (((order) == (IntegerEncoding.BIG_ENDIAN))
                    ? ByteOrder.BIG_ENDIAN
                    : ByteOrder.LITTLE_ENDIAN)));

    short additionalStatusWords =
        readSimpleField(
            "additionalStatusWords",
            readUnsignedShort(readBuffer, 8),
            WithOption.WithByteOrder(
                (((order) == (IntegerEncoding.BIG_ENDIAN))
                    ? ByteOrder.BIG_ENDIAN
                    : ByteOrder.LITTLE_ENDIAN)));

    int connectionSerialNumber =
        readSimpleField(
            "connectionSerialNumber",
            readUnsignedInt(readBuffer, 16),
            WithOption.WithByteOrder(
                (((order) == (IntegerEncoding.BIG_ENDIAN))
                    ? ByteOrder.BIG_ENDIAN
                    : ByteOrder.LITTLE_ENDIAN)));

    int originatorVendorId =
        readSimpleField(
            "originatorVendorId",
            readUnsignedInt(readBuffer, 16),
            WithOption.WithByteOrder(
                (((order) == (IntegerEncoding.BIG_ENDIAN))
                    ? ByteOrder.BIG_ENDIAN
                    : ByteOrder.LITTLE_ENDIAN)));

    long originatorSerialNumber =
        readSimpleField(
            "originatorSerialNumber",
            readUnsignedLong(readBuffer, 32),
            WithOption.WithByteOrder(
                (((order) == (IntegerEncoding.BIG_ENDIAN))
                    ? ByteOrder.BIG_ENDIAN
                    : ByteOrder.LITTLE_ENDIAN)));

    short applicationReplySize =
        readSimpleField(
            "applicationReplySize",
            readUnsignedShort(readBuffer, 8),
            WithOption.WithByteOrder(
                (((order) == (IntegerEncoding.BIG_ENDIAN))
                    ? ByteOrder.BIG_ENDIAN
                    : ByteOrder.LITTLE_ENDIAN)));

    Short reservedField1 =
        readReservedField(
            "reserved",
            readUnsignedShort(readBuffer, 8),
            (short) 0x00,
            WithOption.WithByteOrder(
                (((order) == (IntegerEncoding.BIG_ENDIAN))
                    ? ByteOrder.BIG_ENDIAN
                    : ByteOrder.LITTLE_ENDIAN)));

    readBuffer.closeContext("CipConnectionManagerCloseResponse");
    // Create the instance
    return new CipConnectionManagerCloseResponseBuilder(
        status,
        additionalStatusWords,
        connectionSerialNumber,
        originatorVendorId,
        originatorSerialNumber,
        applicationReplySize,
        serviceLen,
        order,
        reservedField0,
        reservedField1);
  }

  public static class CipConnectionManagerCloseResponseBuilder
      implements CipService.CipServiceBuilder {
    private final short status;
    private final short additionalStatusWords;
    private final int connectionSerialNumber;
    private final int originatorVendorId;
    private final long originatorSerialNumber;
    private final short applicationReplySize;
    private final Integer serviceLen;
    private final IntegerEncoding order;
    private final Short reservedField0;
    private final Short reservedField1;

    public CipConnectionManagerCloseResponseBuilder(
        short status,
        short additionalStatusWords,
        int connectionSerialNumber,
        int originatorVendorId,
        long originatorSerialNumber,
        short applicationReplySize,
        Integer serviceLen,
        IntegerEncoding order,
        Short reservedField0,
        Short reservedField1) {
      this.status = status;
      this.additionalStatusWords = additionalStatusWords;
      this.connectionSerialNumber = connectionSerialNumber;
      this.originatorVendorId = originatorVendorId;
      this.originatorSerialNumber = originatorSerialNumber;
      this.applicationReplySize = applicationReplySize;
      this.serviceLen = serviceLen;
      this.order = order;
      this.reservedField0 = reservedField0;
      this.reservedField1 = reservedField1;
    }

    public CipConnectionManagerCloseResponse build(Integer serviceLen, IntegerEncoding order) {

      CipConnectionManagerCloseResponse cipConnectionManagerCloseResponse =
          new CipConnectionManagerCloseResponse(
              status,
              additionalStatusWords,
              connectionSerialNumber,
              originatorVendorId,
              originatorSerialNumber,
              applicationReplySize,
              serviceLen,
              order);
      cipConnectionManagerCloseResponse.reservedField0 = reservedField0;
      cipConnectionManagerCloseResponse.reservedField1 = reservedField1;
      return cipConnectionManagerCloseResponse;
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof CipConnectionManagerCloseResponse)) {
      return false;
    }
    CipConnectionManagerCloseResponse that = (CipConnectionManagerCloseResponse) o;
    return (getStatus() == that.getStatus())
        && (getAdditionalStatusWords() == that.getAdditionalStatusWords())
        && (getConnectionSerialNumber() == that.getConnectionSerialNumber())
        && (getOriginatorVendorId() == that.getOriginatorVendorId())
        && (getOriginatorSerialNumber() == that.getOriginatorSerialNumber())
        && (getApplicationReplySize() == that.getApplicationReplySize())
        && super.equals(that)
        && true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        super.hashCode(),
        getStatus(),
        getAdditionalStatusWords(),
        getConnectionSerialNumber(),
        getOriginatorVendorId(),
        getOriginatorSerialNumber(),
        getApplicationReplySize());
  }

  @Override
  public String toString() {
    WriteBufferBoxBased writeBufferBoxBased = new WriteBufferBoxBased(true, true);
    try {
      writeBufferBoxBased.writeSerializable(this);
    } catch (SerializationException e) {
      throw new RuntimeException(e);
    }
    return "\n" + writeBufferBoxBased.getBox().toString() + "\n";
  }
}
